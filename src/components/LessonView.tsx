import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Lesson } from '../types';
import { subjects } from '../data/educationalData';

interface LessonViewProps {
  lesson: Lesson;
  onComplete: () => void;
  onBack: () => void;
}

const LessonView: React.FC<LessonViewProps> = ({ lesson, onComplete, onBack }: LessonViewProps) => {
  const [isCompleted, setIsCompleted] = useState(false);
  const navigate = useNavigate();

  // Simple markdown-like rendering for the content
  const renderContent = (content: string) => {
    const lines = content.split('\n');
    return lines.map((line, index) => {
      // Handle headers
      if (line.startsWith('**') && line.endsWith('**')) {
        return <h3 key={index} className="text-xl font-bold text-gray-800 mt-6 mb-3">{line.slice(2, -2)}</h3>;
      }
      
      // Handle bold text
      if (line.includes('**')) {
        const parts = line.split('**');
        return (
          <p key={index} className="mb-3 text-gray-700">
            {parts.map((part, i) => 
              i % 2 === 1 ? <strong key={i}>{part}</strong> : part
            )}
          </p>
        );
      }
      
      // Handle numbered lists
      if (/^\d+\)/.test(line)) {
        return <p key={index} className="mb-2 text-gray-700 pl-4">{line}</p>;
      }
      
      // Handle bullet points
      if (line.startsWith('- ')) {
        return <p key={index} className="mb-2 text-gray-700 pl-4">‚Ä¢ {line.slice(2)}</p>;
      }
      
      // Handle examples
      if (line.startsWith('–ü—Ä–∏–º–µ—Ä:') || line.startsWith('Example:')) {
        return <p key={index} className="mb-3 text-blue-600 font-medium">{line}</p>;
      }
      
      // Handle tasks/assignments
      if (line.startsWith('**–ó–∞–¥–∞–Ω–∏–µ:**') || line.startsWith('**Task:**')) {
        return <h4 key={index} className="text-lg font-semibold text-green-700 mt-6 mb-3">{line.slice(3, -3)}</h4>;
      }
      
      // Handle formulas
      if (line.includes('¬≤') || line.includes('=') || line.includes('+') || line.includes('√ó')) {
        return <p key={index} className="mb-3 text-gray-700 font-mono bg-gray-100 p-2 rounded">{line}</p>;
      }
      
      // Empty lines
      if (line.trim() === '') {
        return <div key={index} className="h-2"></div>;
      }
      
      // Regular text
      return <p key={index} className="mb-3 text-gray-700">{line}</p>;
    });
  };

  const handleComplete = () => {
    setIsCompleted(true);
    setTimeout(() => {
      onComplete();
    }, 1000);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-6">
          <button 
            onClick={() => {
              if (lesson.topicId === 'belarusian-grammar') {
                navigate('/topic/belarusian-grammar');
              } else {
                onBack();
              }
            }}
            className="text-white hover:text-white mb-4 flex items-center"
          >
            ‚Üê –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º
          </button>
          
          <div className="bg-white rounded-xl shadow-lg p-8">
            <div className="text-center mb-8">
              <h1
                className="text-3xl font-bold text-gray-800 mb-4"
                style={{
                  background: 'linear-gradient(90deg, #fde047 0%, #facc15 100%)',
                  borderRadius: '1rem',
                  padding: '0.5em 1.5em',
                  boxShadow: '0 0 16px 4px #38bdf8aa, 0 2px 16px #6366f155',
                  display: 'inline-block',
                  color: '#222',
                  fontFamily: 'Calibri, Arial, sans-serif',
                  textShadow: '0 2px 8px #fff8, 0 1px 8px #38bdf8',
                }}
              >
                {lesson.title}
              </h1>
              <div className="flex justify-center space-x-4 text-sm text-gray-600">
                <span>üìö –£—Ä–æ–∫</span>
                <span>‚è±Ô∏è ~15 –º–∏–Ω—É—Ç</span>
                <span>üéØ {lesson.order} –∏–∑ —Å–µ—Ä–∏–∏</span>
              </div>
            </div>

            {/* Progress indicator */}
            <div className="w-full bg-gray-200 rounded-full h-2 mb-8">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-500"
                style={{ width: isCompleted ? '100%' : '0%' }}
              ></div>
            </div>

            {/* Lesson Content */}
            <div className="prose prose-lg max-w-none">
              <div className="bg-gray-50 rounded-lg p-6 mb-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">–ó–º–µ—Å—Ç —É—Ä–æ–∫–∞:</h3>
                {renderContent(lesson.content)}
              </div>
            </div>

            {/* Interactive Elements */}
            <div className="bg-blue-50 rounded-lg p-6 mb-6">
              <h3 className="text-lg font-semibold text-blue-800 mb-4">
                {(() => {
                  // Find the subject for this lesson
                  const subj = subjects.find(s => s.id === lesson.subjectId);
                  if (subj && subj.id === 'belarusian') {
                    return '–®—Ç–æ –≤–∞–∂–Ω–∞ –∑–∞–ø–æ–º–Ω—ñ—Ü—å:';
                  }
                  return 'üí° –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:';
                })()}
              </h3>
              <ul className="space-y-2 text-blue-700">
                {(() => {
                  // First Belarusian lesson: special bullet
                  if (lesson.id === 'belarusian-grammar-0') {
                    return [
                      <li key="special">‚Ä¢ –í—ã–∫–ª—é—á—ç–Ω–Ω—ñ: —Ñ—ñ–ª–µ, —Å–∞–ª—å—Ç–∞-–º–∞—Ä—Ç–∞–ª–µ, –ø—ñ–∫–µ, –∫–∞–º—é–Ω—ñ–∫–µ</li>,
                      <li key="2">‚Ä¢ –£ –∑–∞–ø–∞–∑—ã—á–∞–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö –Ω–∞–ø—ñ—Å–∞–Ω–Ω–µ —ç —ñ –∞ –Ω–µ –ø–∞–¥ –Ω–∞—Ü—ñ—Å–∫–∞–º –ø–∞—Å–ª—è —ñ–Ω—à—ã—Ö –∑—ã—á–Ω—ã—Ö —Ä—ç–≥—É–ª—é–µ—Ü—Ü–∞ —Å–ª–æ—û–Ω—ñ–∫–∞–º: <br/>–ø–∞–Ω—ç–ª—å, —Ç—É–Ω—ç–ª—å, –∞–ª–µ: —à—ã–Ω–µ–ª—å, —Å–µ–∫—Ç–∞–Ω—Ü–∫—ñ<br/>–ó—ç–ª—å–≤–∞, –∞–ª–µ: –ó–µ—û—Å —ñ –¥–∞ —Ç. –ø.</li>,
                      <li key="3">‚Ä¢ –í–∞—û–ª–∞—Å–Ω—ã—Ö —ñ–º—ë–Ω–∞—Ö –Ω–µ—Å–ª–∞–≤—è–Ω—Å–∫–∞–≥–∞ –ø–∞—Ö–æ–¥–∂–∞–Ω–Ω—è –∑–∞—Ö–æ—û–≤–∞—é—Ü—Ü–∞ -—ç–ª—å, -—ç—Ä: –õ–∞–Ω–¥—ç—Ä, –Æ–ø—ñ—Ç—ç—Ä, –û–¥—ç—Ä, –ü—ñ—Ç—ç—Ä.</li>
                    ];
                  }
                  // Default bullets
                  return [
                    <li key="1">‚Ä¢ –†–ê–î–´–Å- ‚Äî –†–ê–î–´–ï- (–†–ê–î–´–Ø-)<br/>–†–∞–¥—ã—ë- ‚Äî –ø–µ—Ä—à–∞—è —á–∞—Å—Ç–∫–∞ —Å–∫–ª–∞–¥–∞–Ω—ã—Ö —Å–ª–æ—û —É –∑–Ω–∞—á—ç–Ω–Ω—ñ' —è–∫—ñ –º–∞–µ –∞–¥–Ω–æ—Å—ñ–Ω—ã –¥–∞ —Ä–∞–¥—ã—ë': <br/>—Ä–∞–¥—ã—ë–≤—É–∑–µ–ª, —Ä–∞–¥—ã—ë—Ç—ç—Ö–Ω—ñ–∫–∞, —Ä–∞–¥—ã—ë—Å—É–≤—è–∑—å, —Ä–∞–¥—ã—ë—Å—Ç–∞–Ω—Ü—ã—è.<br/>–†–∞–¥—ã–µ- ‚Äî –ø–µ—Ä—à–∞—è —á–∞—Å—Ç–∫–∞ —Å–∫–ª–∞–¥–∞–Ω—ã—Ö —Å–ª–æ—û —É –∑–Ω–∞—á—ç–Ω–Ω—ñ '—è–∫—ñ –∞–¥–Ω–æ—Å—ñ—Ü—Ü–∞–¥–∞ —Ä–∞–¥—ã—é, —Ä–∞–¥—ã—è—Ü—ã—ñ': <br/>—Ä–∞–¥—ã–µ—ñ–∑–∞—Ç–æ–ø—ã, —Ä–∞–¥—ã–µ–∞–∫—Ç—ã—û–Ω–∞—Å—Ü—å, —Ä–∞–¥—ã–µ—Ç—ç—Ä–∞–ø—ñ—è.<br/>–£ –ø–µ—Ä—à—ã–º —Å–∫–ª–∞–¥–∑–µ –ø–µ—Ä–∞–¥ –Ω–∞—Ü—ñ—Å–∫–∞–º —É –≥—ç—Ç—ã–º –≤—ã–ø–∞–¥–∫—É –ø—ñ—à–∞—Ü—Ü–∞—è: —Ä–∞–¥—ã—è–ª–æ–≥—ñ—è, —Ä–∞–¥—ã—è—Ö—ñ–º—ñ—è, —Ä–∞–¥—ã—è–≥—Ä–∞—Ñ—ñ—è</li>
                  ];
                })()}
              </ul>
            </div>

            {/* Action Buttons */}
            <div className="flex justify-between items-center pt-6 border-t border-gray-200">
              <div className="text-sm text-gray-600">
                {isCompleted ? '‚úÖ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!' : '–ì–æ—Ç–æ–≤ –∫ –∏–∑—É—á–µ–Ω–∏—é'}
              </div>
              
              <button
                onClick={handleComplete}
                disabled={isCompleted}
                className={`px-8 py-3 rounded-lg font-medium transition-all duration-300 ${
                  isCompleted 
                    ? 'bg-green-500 text-white cursor-not-allowed' 
                    : 'bg-blue-500 text-white hover:bg-blue-600 hover:scale-105'
                }`}
              >
                {isCompleted 
                  ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ!' 
                  : (subjects.find(s => s.id === lesson.subjectId && s.id === 'belarusian') ? '–°–∫–æ–Ω—á—ã—Ü—å —É—Ä–æ–∫' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫')}
              </button>
            </div>
          </div>
        </div>

        {/* Next Steps */}
        {isCompleted && (
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h3 className="text-xl font-bold text-gray-800 mb-4">üéâ –û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <button className="p-4 border border-gray-200 rounded-lg hover:bg-blue-50 transition-colors">
                <div className="text-2xl mb-2">üìù</div>
                <div className="font-medium">–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç</div>
                <div className="text-sm text-gray-600">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è</div>
              </button>
              <button className="p-4 border border-gray-200 rounded-lg hover:bg-purple-50 transition-colors">
                <div className="text-2xl mb-2">üéÆ</div>
                <div className="font-medium">–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</div>
                <div className="text-sm text-gray-600">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</div>
              </button>
              <button className="p-4 border border-gray-200 rounded-lg hover:bg-green-50 transition-colors">
                <div className="text-2xl mb-2">üìö</div>
                <div className="font-medium">–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫</div>
                <div className="text-sm text-gray-600">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ</div>
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default LessonView; 